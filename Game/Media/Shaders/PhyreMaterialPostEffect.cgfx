/* SIE CONFIDENTIAL
PhyreEngine(TM) Package 3.18.0.0
* Copyright (C) 2016 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "PhyreShaderPlatform.h"
#include "PhyreSceneWideParameters.h"

sampler2D ColorBuffer;
sampler2D DepthBuffer;

struct VertexIn
{
	float3 vertex			:	POSITION;
	float2 uv				:	TEXCOORD0;
};

struct VertexOut
{
	float4 position			: POSITION;
	float2 uv				: TEXCOORD0;
};

struct FragIn
{
	float2 uv				: TEXCOORD0;
	float4 screenPosition	: WPOS;
};

VertexOut MaterialPostEffectVS(VertexIn input)
{
	VertexOut output;
	output.position = float4(input.vertex.xy, 1, 1);
	output.uv = input.uv;
	return output;
}

VertexOut MaterialPostEffectInvertedVS(VertexIn input)
{
	VertexOut output;
	output.position = float4(input.vertex.xy, 1, 1);
	output.uv = input.uv;
	output.uv.y = 1 - output.uv.y;

	return output;
}

float4 MaterialPostEffectPS(FragIn input) : FRAG_OUTPUT_COLOR0
{
	float2 q = input.screenPosition.xy / scene.ViewportWidthHeight.xy;
	float4 color = tex2D(ColorBuffer, input.uv);
	// Vignette
	return color *= 0.5f + 0.5f * pow(16.0f * q.x * q.y * (1.0f - q.x) * (1.0f - q.y), 0.25f);
}

technique MaterialPostEffect
{

	pass mainRender
	{
		VertexProgram = compile vp40 MaterialPostEffectVS();
		FragmentProgram = compile fp40 MaterialPostEffectPS();
		colorMask = bool4(true, true, true, true);
		cullFace = back;
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
	}
}
technique MaterialPostEffectInverted
{
	pass mainRender
	{
		VertexProgram = compile vp40 MaterialPostEffectInvertedVS();
		FragmentProgram = compile fp40 MaterialPostEffectPS();
		colorMask = bool4(true, true, true, true);
		cullFace = back;
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
	}
}