/* SIE CONFIDENTIAL
PhyreEngine(TM) Package 3.18.0.0
* Copyright (C) 2016 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "PhyreShaderPlatform.h"
#include "PhyreSceneWideParameters.h"

float4 PixelOffset;

sampler2D DepthBuffer;
sampler2D ColorBuffer;
sampler2D EdgeDetectBuffer;
sampler2D EdgeLengthBuffer;

float Threshold;
float4 TileUvTransform;

///////////////////////////////////////////////////////////////
// structures /////////////////////
///////////////////////////////////////////////////////////////

struct FullscreenVertexIn
{
	float3 vertex		: POSITION;
	float2 uv			: TEXCOORD0;
};

struct FullscreenVertexOut
{
	float4 Position		: POSITION;
	float2 Uv			: TEXCOORD0;
};
struct FullscreenFragIn
{
	float4 ScreenPosition : WPOS;
	float2	Uv			: TEXCOORD0;
};


struct TiledVertexIn
{
	half2 vertex	: POSITION;	
};

struct TiledVertexOut
{
	float4 position		: POSITION;
};

struct TiledFragIn
{
	float4 ScreenPosition	: WPOS;
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

FullscreenVertexOut FullscreenVP(FullscreenVertexIn input)
{
	FullscreenVertexOut output;

	output.Position = float4(input.vertex.xy, 1, 1);
	output.Uv = input.uv;

	return output;
}

TiledVertexOut TiledVP(TiledVertexIn input)
{
	TiledVertexOut output;
	float2 pos = input.vertex.xy;// * 0.3f;
	output.position = float4(pos,0.0f,1.0f);	
	return output;
}


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

float2 TileUvToScreenUv(TiledFragIn input)
{
	float2 uv = input.ScreenPosition.xy * scene.screenWidthHeightInv;
	uv = uv * TileUvTransform.xy + TileUvTransform.zw;
	return uv;
}


float4 edgeDetect(float2 uv)
{
	float4 centre = tex2D(ColorBuffer, uv);
	float4 x1 = tex2D(ColorBuffer, uv + float2( PixelOffset.x,0.0f));
	float4 y1 = tex2D(ColorBuffer, uv + float2(0.0f, PixelOffset.y));
	float4 xy1 = tex2D(ColorBuffer, uv + float2(PixelOffset.x, PixelOffset.y));
	float4 dx = abs(x1 - centre);
	float4 dy = abs(y1 - centre);
	float4 dxy = abs(xy1 - centre);
	float dxRslt = dot(dx.xyz,1.0f);
	float dyRslt = dot(dy.xyz,1.0f);
	float dxyRslt = dot(dxy.xyz,1.0f);
	
	float threshold = 0.2f;
	float dxEdge = dxRslt > threshold;
	float dyEdge = dyRslt > threshold;
	float dxyEdge = dxyRslt > threshold;
		
	return float4(dxEdge, dyEdge, 0.0f, 0.0f);
}

float4 EdgeDetectFP(FullscreenFragIn In) : FRAG_OUTPUT_COLOR0
{
	float4 edgeRslt = edgeDetect(In.Uv);
	return edgeRslt;
}


void generateEdgeLength0(inout float2 rsltDist, float2 uv, float2 dir, float2 edgeMaskX, float2 edgeMaskY)
{
	float threshold = Threshold;
	uv += float2(dir.y,dir.x) * PixelOffset.xy * 0.5f; 

	{
		// scan left
		float2 currUV = uv;
		float inc = 1.0f / 255.0f;
		for (int k = 0; k < 4; ++k)
		{
			currUV -= dir * PixelOffset.xy;
			float4 edge = tex2D(EdgeDetectBuffer, currUV);
			
			if(dot(edge.xy,edgeMaskX) > threshold
			|| dot(edge.xy,edgeMaskY) < threshold)
				inc = 0;
				
			rsltDist.x += inc;
		}
	}
		
	{
		// scan right
		float2 currUV = uv;
		float inc = 1.0f / 255.0f;		
		float4 edge = tex2D(EdgeDetectBuffer, currUV);
		
		for (int k = 0; k < 4; ++k)
		{						
			if (dot(edge.xy,edgeMaskX) > threshold) 
				inc = 0.0f; // top or bottom edge found					
		
			currUV += dir * PixelOffset.xy;
		
			edge = tex2D(EdgeDetectBuffer, currUV);
		
			if ( dot(edge.xy,edgeMaskY) < threshold) 
				inc = 0.0f;			
			rsltDist.y += inc;
		}
	}
}

float generateEdgeLength(float2 uv, float2 dir, float rsltLength, float4 mask)
{
	dir *= PixelOffset.xy * 255.0f;
	float2 currUV = uv + dir * rsltLength;
	for (int k = 0; k < 3; ++k)
	{
		float deltaU = dot(tex2D(EdgeLengthBuffer, currUV), mask);
		
		rsltLength += deltaU;
		currUV += dir * deltaU;
	}
	
	return rsltLength;
} 

float4 RenderEdgeLength0FP(FullscreenFragIn In) : FRAG_OUTPUT_COLOR0
{
	float4 dist = 0;
	float2 uv = In.Uv;
	float2 currEdge = tex2D(EdgeDetectBuffer, uv).xy;
	generateEdgeLength0(dist.xy, uv, float2(1.0f,0.0f), float2(1.0f,0.0f), float2(0.0f,1.0f));
	generateEdgeLength0(dist.zw, uv, float2(0.0f,1.0f), float2(0.0f,1.0f), float2(1.0f,0.0f));

	return dist;
}
float4 RenderEdgeLengthFP(FullscreenFragIn In) : FRAG_OUTPUT_COLOR0
{
	float4 result;
	float2 uv = In.Uv;
	float4 deltaPos = tex2D(EdgeLengthBuffer, uv);
	
	result = deltaPos;
		
	result.x = generateEdgeLength(uv, float2(-1.0f,0.0f), result.x, float4(1.0f,0.0f,0.0f,0.0f));
	result.y = generateEdgeLength(uv, float2(1.0f,0.0f), result.y, float4(0.0f,1.0f,0.0f,0.0f));
	result.z = generateEdgeLength(uv, float2(0.0f,-1.0f), result.z, float4(0.0f,0.0f,1.0f,0.0f));
	result.w = generateEdgeLength(uv, float2(0.0f,1.0f), result.w, float4(0.0f,0.0f,0.0f,1.0f));
		
	return result;
}


//#define DEBUG_COLOURS

half getBlendFactor(half start, half end, half pos, half2 h, half step)
{	
	half slope = (h.y - h.x) / (end + step - start);
	half hb0 = h.x + slope * (pos - start);
	half hb1 = hb0 + step * slope;
	half area = 0.5f * (hb0 + hb1);
	return area;
}

void evaluateMLAAEdge(inout half4 finalCol, inout half weight, float2 uv, half2 edgeDist, half2 edgeDir, half2 blendFactor, float2 edgePixelOffset, half4 debugColor)
{
	half negLength = round(edgeDist.x * 255.f);
	half posLength = round(edgeDist.y * 255.f);
	half len = negLength + posLength + 1;
	float2 startUV = uv + (edgeDir * -PixelOffset.xy * negLength) - edgePixelOffset;
	float2 endUV = uv + (edgeDir * PixelOffset.xy * posLength) - edgePixelOffset;
	
	if (len > 1 && negLength <= posLength) 
	{
		half4 c = tex2D(EdgeDetectBuffer, startUV - (PixelOffset.xy * edgeDir) + edgePixelOffset);	
		if (dot(c.xy,edgeDir) > Threshold)
		{
#ifdef DEBUG_COLOURS
			finalCol += debugColor;
#else
			half b = getBlendFactor(dot(startUV,edgeDir), dot(endUV,edgeDir), dot(uv,edgeDir), blendFactor, dot(PixelOffset.xy,edgeDir));						
			finalCol += h4tex2D(ColorBuffer, uv + b * ((1-edgeDir) * PixelOffset.xy)); 
#endif		
			weight += 1.0;
		}					
	}
	
	if (len > 1 && negLength >= posLength) 
	{			
		half4 c = tex2D(EdgeDetectBuffer, endUV + edgePixelOffset);	
		if (dot(c.xy,edgeDir) > Threshold)
		{	
#ifdef DEBUG_COLOURS
			finalCol += debugColor;
#else		
			half b = getBlendFactor(dot(startUV,edgeDir), dot(endUV,edgeDir), dot(uv,edgeDir), -blendFactor, dot(PixelOffset.xy,edgeDir));				
			finalCol += h4tex2D(ColorBuffer, uv + b * ((1-edgeDir) * PixelOffset.xy)); 
#endif				
			weight += 1.0;
		}
	}				
	
}

half4 CalculateMLAA(float2 uv)
{
	half2 edges = h4tex2D(EdgeDetectBuffer, uv).xy;	
	half2 edgesT = h4tex2D(EdgeDetectBuffer, uv - float2(0.0f, PixelOffset.y)).xy;
	half2 edgesL = h4tex2D(EdgeDetectBuffer, uv - float2(PixelOffset.x, 0.0f)).xy;	
	
	half threshold = Threshold;
	half4 finalCol = 0;
	half weight = 0;

	half4 dist = h4tex2D(EdgeLengthBuffer, uv);
	half4 distT = h4tex2D(EdgeLengthBuffer, uv - float2(0.0f, PixelOffset.y));
	half4 distL = h4tex2D(EdgeLengthBuffer, uv - float2(PixelOffset.x, 0.0f));	
	
	half4 baseColour = h4tex2D(ColorBuffer, uv);
	
	if(edges.y > threshold)
	{
		evaluateMLAAEdge(finalCol, weight, uv, dist.xy, half2(1.0f,0.0f), half2(0.5f, -0.5f), 0, half4(1.0f,0.0f,0.0f,0.0f));
	}
	if(edgesT.y > threshold)
	{	
		evaluateMLAAEdge(finalCol, weight, uv, distT.xy, half2(1.0f,0.0f), half2(-0.5f, 0.5f), float2(0.0f,PixelOffset.y), half4(0.0f,1.0f,0.0f,0.0f));
	}
	if (edges.x > threshold)
	{
		evaluateMLAAEdge(finalCol, weight, uv, dist.zw, half2(0.0f,1.0f), half2(0.5f, -0.5f), 0, half4(0.0f,0.0f,1.0f,0.0f));
	}
	if (edgesL.x > threshold)
	{
		evaluateMLAAEdge(finalCol, weight, uv, distL.zw, half2(0.0f,1.0f), half2(-0.5f, 0.5f), float2(PixelOffset.x,0.0f), half4(0.0f,0.0f,0.0f,1.0f));
	}
		
#ifdef DEBUG_COLOURS
	if(weight == 0)
		return 0;
	else
	{
		finalCol /= weight;
		//return half4(finalCol.xy, 0.0f,1.0f);
		return half4(finalCol.x+finalCol.y, finalCol.z+finalCol.w, 0.0f,1.0f);
	}
#else			
	if(weight > 0)
		finalCol *= 1.0/weight; 	
	else
		finalCol = baseColour;
	//finalCol += baseColour * saturate(1.0f-(weight*1000.0f));	
	return finalCol;
#endif
}



float4 ApplyMLAAFP(FullscreenFragIn In) : FRAG_OUTPUT_COLOR0
{
	return CalculateMLAA(In.Uv);
}

//#define SHOW_TILES

half4 NoMLAAFP(TiledFragIn input) : FRAG_OUTPUT_COLOR
{
	float2 inUv = TileUvToScreenUv(input);	
#ifdef SHOW_TILES
	return half4(0.0f,1.0f,0.0f,1.0f);
#else
	return h4tex2D(ColorBuffer, inUv);
#endif
}

half4 HorizVertMLAAFP(TiledFragIn input) : FRAG_OUTPUT_COLOR
{
	float2 uv = TileUvToScreenUv(input);		
#ifdef SHOW_TILES
	return float4( tex2D(EdgeDetectBuffer, uv).xy, 0,1);
#else	
	return CalculateMLAA(uv);
#endif
}

half4 CopyBufferFP(FullscreenFragIn In) : FRAG_OUTPUT_COLOR0
{
	return h4tex2D(ColorBuffer, In.Uv);
}



technique RenderMLAA
{
	pass p0
	{
		VertexProgram = compile vp40 FullscreenVP();
		FragmentProgram = compile fp40 ApplyMLAAFP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
	}
}
technique RenderHorizVertMLAA
{
	pass p0
	{
		VertexProgram = compile vp40 TiledVP();
		FragmentProgram = compile fp40 HorizVertMLAAFP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
		pointSize = 8;			
		pointSpriteCoordReplace[0] = true;
		pointSpriteCoordReplace[1] = false;
	}
}
technique RenderNoMLAA
{
	pass p0
	{
		VertexProgram = compile vp40 TiledVP();
		FragmentProgram = compile fp40 NoMLAAFP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
		pointSize = 16;			
		pointSpriteCoordReplace[0] = true;
		pointSpriteCoordReplace[1] = false;
	}
}


technique CopyNoMLAA
{
	pass p0
	{
		VertexProgram = compile vp40 FullscreenVP();
		FragmentProgram = compile fp40 CopyBufferFP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
	}
}

technique RenderEdgeDetect
{
	pass p0
	{
		VertexProgram = compile arbvp1 FullscreenVP();
		FragmentProgram = compile arbfp1 EdgeDetectFP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
	}
}


technique RenderEdgeLength0
{
	pass p0
	{
		VertexProgram = compile arbvp1 FullscreenVP();
		FragmentProgram = compile arbfp1 RenderEdgeLength0FP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
	}
}
technique RenderEdgeLength
{
	pass p0
	{
		VertexProgram = compile arbvp1 FullscreenVP();
		FragmentProgram = compile arbfp1 RenderEdgeLengthFP();	
		colorMask = bool4(true,true,true,true);
		cullFaceEnable = false;
		depthTestEnable = false;
		depthMask = false;
		blendEnable = false;
	}
}