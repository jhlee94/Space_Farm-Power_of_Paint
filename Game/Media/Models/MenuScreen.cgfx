/* SIE CONFIDENTIAL
PhyreEngine(TM) Package 3.18.0.0
* Copyright (C) 2016 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "..\Shaders\PhyreShaderPlatform.h"

float4x4 WorldViewProjection		: WorldViewProjection;	
float4x4 World;

float3 Colour : COLOUR = float3(1.0f,1.0f,1.0f);
float Alpha : ALPHA = 1.0f;
float CameraAspectRatio;

sampler2D BitmapFontTexture;
float3 textColor		= { 1.0f, 1.0f, 1.0f };

static const float3 BaseColour = float3(0.75f,1.0f,0.78f);

///////////////////////////////////////////////////////////////
// structures /////////////////////
///////////////////////////////////////////////////////////////

struct VertexIn
{
	float3 Position	: POSITION;
};

struct VertexOut
{
	float4 Position		: POSITION;
};

struct VPInput
{
	float2 position		: POSITION;
	float2 uv			: TEXCOORD0;
};

struct VPOutput
{
	float4 position		: POSITION;
	float2 uv			: TEXCOORD0;
};

struct FPInput
{
	float2 uv			: TEXCOORD0;
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

VertexOut RenderVP(VertexIn input)
{
	VertexOut output;
	output.Position = mul(WorldViewProjection, float4(input.Position.xyz, 1.0));
	return output;
}

half4 RenderFP(VertexOut input) : FRAG_OUTPUT_COLOR0
{
	return half4(BaseColour * Colour * Alpha * 0.5f,1.0f);//Alpha);
}

VertexOut FullscreenVP(float3 vertex : POSITION)
{
	VertexOut output;
	output.Position = float4(vertex.xyz, 1.0);
	return output;
}
half4 DarkenBackgroundFP(VertexOut input) : FRAG_OUTPUT_COLOR0
{
	return half4(0,0,0,0.75f);
}


VPOutput TextVP(VPInput IN)
{
	VPOutput OUT;
	
	OUT.position = mul(World, float4(IN.position.xy, 0.0f, 1.0f));
	OUT.position.x *= CameraAspectRatio;
	OUT.uv = IN.uv;
	
	return OUT;
}

float4 TextFP(FPInput IN) : FRAG_OUTPUT_COLOR0
{
	half a = tex2D(BitmapFontTexture, IN.uv).r;

	return float4(BaseColour * textColor * a, textColor.r * a * 2.0);
}


technique DrawMenu
<
	string PhyreRenderPass = "Transparent";
>
{
	pass pass0
	{
		DepthTestEnable = false;
		BlendEnable = true;
		BlendFunc = {one,one};
		ColorMask = bool4(true,true,true,true);
		CullFaceEnable = false;
		

		VertexProgram = compile arbvp1 RenderVP();
		FragmentProgram = compile arbfp1 RenderFP();
	}
}






technique RenderText_AlphaBlend
{
	pass p0
	{
		VertexProgram = compile arbvp1 TextVP();
		FragmentProgram = compile arbfp1 TextFP();
		ColorMask = bool4(true, true, true, true);
		DepthMask = false;
		DepthTestEnable = false;
		BlendEnable = true;
		BlendFunc = {one, one};
	}
}

technique DarkenBackground
{
	pass p0
	{
		VertexProgram = compile arbvp1 FullscreenVP();
		FragmentProgram = compile arbfp1 DarkenBackgroundFP();
		ColorMask = bool4(true, true, true, false);
		DepthMask = false;
		DepthTestEnable = false;
		BlendEnable = true;
		BlendFunc = {srcalpha, oneminussrcalpha};
	}
}

